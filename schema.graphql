type App @aws_iam
@aws_api_key {
	id: ID!
	Sort(
		filter: ModelPostFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelPostConnection
	Posts(
		filter: ModelPostFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelPostConnection
	Companies(
		filter: ModelCompanyFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelCompanyConnection
	Twusers(
		filter: ModelTwuserFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelTwuserConnection
	Jokes(
		filter: ModelJokeFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelJokeConnection
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	_version: Int!
	_deleted: Boolean
	_lastChangedAt: AWSTimestamp!
}

type Article @aws_iam
@aws_api_key {
	id: ID!
	title: String!
	cat: String!
	content: AWSJSON
	image: String
	link: String
	nid: Int
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	_version: Int!
	_deleted: Boolean
	_lastChangedAt: AWSTimestamp!
}

type Company @aws_iam
@aws_api_key {
	id: ID!
	name: String
	location: String
	zip: Int
	createdAt: Int
	cat: String
	appID: ID!
	updatedAt: AWSDateTime!
	_version: Int!
	_deleted: Boolean
	_lastChangedAt: AWSTimestamp!
}

enum Condition {
	NEW
	USED
	PARTS
}

input CreateAppInput {
	id: ID
	_version: Int
}

input CreateArticleInput {
	id: ID
	title: String!
	cat: String!
	content: AWSJSON
	image: String
	link: String
	nid: Int
	_version: Int
}

input CreateCompanyInput {
	id: ID
	name: String
	location: String
	zip: Int
	createdAt: Int
	cat: String
	appID: ID!
	_version: Int
}

input CreateJokeInput {
	id: ID
	cat: String!
	joke: String
	nid: Int
	appID: ID!
	_version: Int
}

input CreatePostInput {
	id: ID
	title: String!
	cat: String!
	condition: Condition
	currency: String
	data: AWSJSON
	location: String!
	description: String
	images: [String]
	parrent: [String]
	phone: Int
	physical: Boolean
	price: Int
	query: String
	appID: ID!
	_version: Int
}

input CreateTwuserInput {
	id: ID
	user: String
	cat: String!
	letter: String
	nid: Int
	appID: ID!
	_version: Int
}

input DeleteAppInput {
	id: ID!
	_version: Int
}

input DeleteArticleInput {
	id: ID!
	_version: Int
}

input DeleteCompanyInput {
	id: ID!
	_version: Int
}

input DeleteJokeInput {
	id: ID!
	_version: Int
}

input DeletePostInput {
	id: ID!
	_version: Int
}

input DeleteTwuserInput {
	id: ID!
	_version: Int
}

type Joke @aws_iam
@aws_api_key {
	id: ID!
	cat: String!
	joke: String
	nid: Int
	appID: ID!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	_version: Int!
	_deleted: Boolean
	_lastChangedAt: AWSTimestamp!
}

input ModelAppConditionInput {
	and: [ModelAppConditionInput]
	or: [ModelAppConditionInput]
	not: ModelAppConditionInput
}

type ModelAppConnection @aws_api_key
@aws_iam {
	items: [App]!
	nextToken: String
	startedAt: AWSTimestamp
}

input ModelAppFilterInput {
	id: ModelIDInput
	and: [ModelAppFilterInput]
	or: [ModelAppFilterInput]
	not: ModelAppFilterInput
}

input ModelArticleConditionInput {
	title: ModelStringInput
	cat: ModelStringInput
	content: ModelStringInput
	image: ModelStringInput
	link: ModelStringInput
	nid: ModelIntInput
	and: [ModelArticleConditionInput]
	or: [ModelArticleConditionInput]
	not: ModelArticleConditionInput
}

type ModelArticleConnection @aws_api_key
@aws_iam {
	items: [Article]!
	nextToken: String
	startedAt: AWSTimestamp
}

input ModelArticleFilterInput {
	id: ModelIDInput
	title: ModelStringInput
	cat: ModelStringInput
	content: ModelStringInput
	image: ModelStringInput
	link: ModelStringInput
	nid: ModelIntInput
	and: [ModelArticleFilterInput]
	or: [ModelArticleFilterInput]
	not: ModelArticleFilterInput
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelCompanyConditionInput {
	name: ModelStringInput
	location: ModelStringInput
	zip: ModelIntInput
	createdAt: ModelIntInput
	cat: ModelStringInput
	appID: ModelIDInput
	and: [ModelCompanyConditionInput]
	or: [ModelCompanyConditionInput]
	not: ModelCompanyConditionInput
}

type ModelCompanyConnection @aws_iam
@aws_api_key {
	items: [Company]!
	nextToken: String
	startedAt: AWSTimestamp
}

input ModelCompanyFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	location: ModelStringInput
	zip: ModelIntInput
	createdAt: ModelIntInput
	cat: ModelStringInput
	appID: ModelIDInput
	and: [ModelCompanyFilterInput]
	or: [ModelCompanyFilterInput]
	not: ModelCompanyFilterInput
}

input ModelConditionInput {
	eq: Condition
	ne: Condition
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelJokeConditionInput {
	cat: ModelStringInput
	joke: ModelStringInput
	nid: ModelIntInput
	appID: ModelIDInput
	and: [ModelJokeConditionInput]
	or: [ModelJokeConditionInput]
	not: ModelJokeConditionInput
}

type ModelJokeConnection @aws_iam
@aws_api_key {
	items: [Joke]!
	nextToken: String
	startedAt: AWSTimestamp
}

input ModelJokeFilterInput {
	id: ModelIDInput
	cat: ModelStringInput
	joke: ModelStringInput
	nid: ModelIntInput
	appID: ModelIDInput
	and: [ModelJokeFilterInput]
	or: [ModelJokeFilterInput]
	not: ModelJokeFilterInput
}

input ModelPostConditionInput {
	title: ModelStringInput
	cat: ModelStringInput
	condition: ModelConditionInput
	currency: ModelStringInput
	data: ModelStringInput
	location: ModelStringInput
	description: ModelStringInput
	images: ModelStringInput
	parrent: ModelStringInput
	phone: ModelIntInput
	physical: ModelBooleanInput
	price: ModelIntInput
	query: ModelStringInput
	appID: ModelIDInput
	and: [ModelPostConditionInput]
	or: [ModelPostConditionInput]
	not: ModelPostConditionInput
}

type ModelPostConnection @aws_iam
@aws_api_key {
	items: [Post]!
	nextToken: String
	startedAt: AWSTimestamp
}

input ModelPostFilterInput {
	id: ModelIDInput
	title: ModelStringInput
	cat: ModelStringInput
	condition: ModelConditionInput
	currency: ModelStringInput
	data: ModelStringInput
	location: ModelStringInput
	description: ModelStringInput
	images: ModelStringInput
	parrent: ModelStringInput
	phone: ModelIntInput
	physical: ModelBooleanInput
	price: ModelIntInput
	query: ModelStringInput
	appID: ModelIDInput
	and: [ModelPostFilterInput]
	or: [ModelPostFilterInput]
	not: ModelPostFilterInput
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelSubscriptionAppFilterInput {
	id: ModelSubscriptionIDInput
	and: [ModelSubscriptionAppFilterInput]
	or: [ModelSubscriptionAppFilterInput]
}

input ModelSubscriptionArticleFilterInput {
	id: ModelSubscriptionIDInput
	title: ModelSubscriptionStringInput
	cat: ModelSubscriptionStringInput
	content: ModelSubscriptionStringInput
	image: ModelSubscriptionStringInput
	link: ModelSubscriptionStringInput
	nid: ModelSubscriptionIntInput
	and: [ModelSubscriptionArticleFilterInput]
	or: [ModelSubscriptionArticleFilterInput]
}

input ModelSubscriptionBooleanInput {
	ne: Boolean
	eq: Boolean
}

input ModelSubscriptionCompanyFilterInput {
	id: ModelSubscriptionIDInput
	name: ModelSubscriptionStringInput
	location: ModelSubscriptionStringInput
	zip: ModelSubscriptionIntInput
	createdAt: ModelSubscriptionIntInput
	cat: ModelSubscriptionStringInput
	appID: ModelSubscriptionIDInput
	and: [ModelSubscriptionCompanyFilterInput]
	or: [ModelSubscriptionCompanyFilterInput]
}

input ModelSubscriptionFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	in: [Float]
	notIn: [Float]
}

input ModelSubscriptionIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	in: [ID]
	notIn: [ID]
}

input ModelSubscriptionIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	in: [Int]
	notIn: [Int]
}

input ModelSubscriptionJokeFilterInput {
	id: ModelSubscriptionIDInput
	cat: ModelSubscriptionStringInput
	joke: ModelSubscriptionStringInput
	nid: ModelSubscriptionIntInput
	appID: ModelSubscriptionIDInput
	and: [ModelSubscriptionJokeFilterInput]
	or: [ModelSubscriptionJokeFilterInput]
}

input ModelSubscriptionPostFilterInput {
	id: ModelSubscriptionIDInput
	title: ModelSubscriptionStringInput
	cat: ModelSubscriptionStringInput
	condition: ModelSubscriptionStringInput
	currency: ModelSubscriptionStringInput
	data: ModelSubscriptionStringInput
	location: ModelSubscriptionStringInput
	description: ModelSubscriptionStringInput
	images: ModelSubscriptionStringInput
	parrent: ModelSubscriptionStringInput
	phone: ModelSubscriptionIntInput
	physical: ModelSubscriptionBooleanInput
	price: ModelSubscriptionIntInput
	query: ModelSubscriptionStringInput
	appID: ModelSubscriptionIDInput
	and: [ModelSubscriptionPostFilterInput]
	or: [ModelSubscriptionPostFilterInput]
}

input ModelSubscriptionStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	in: [String]
	notIn: [String]
}

input ModelSubscriptionTwuserFilterInput {
	id: ModelSubscriptionIDInput
	user: ModelSubscriptionStringInput
	cat: ModelSubscriptionStringInput
	letter: ModelSubscriptionStringInput
	nid: ModelSubscriptionIntInput
	appID: ModelSubscriptionIDInput
	and: [ModelSubscriptionTwuserFilterInput]
	or: [ModelSubscriptionTwuserFilterInput]
}

input ModelTwuserConditionInput {
	user: ModelStringInput
	cat: ModelStringInput
	letter: ModelStringInput
	nid: ModelIntInput
	appID: ModelIDInput
	and: [ModelTwuserConditionInput]
	or: [ModelTwuserConditionInput]
	not: ModelTwuserConditionInput
}

type ModelTwuserConnection @aws_iam
@aws_api_key {
	items: [Twuser]!
	nextToken: String
	startedAt: AWSTimestamp
}

input ModelTwuserFilterInput {
	id: ModelIDInput
	user: ModelStringInput
	cat: ModelStringInput
	letter: ModelStringInput
	nid: ModelIntInput
	appID: ModelIDInput
	and: [ModelTwuserFilterInput]
	or: [ModelTwuserFilterInput]
	not: ModelTwuserFilterInput
}

type Mutation {
	createApp(input: CreateAppInput!, condition: ModelAppConditionInput): App
		@aws_api_key
@aws_iam
	updateApp(input: UpdateAppInput!, condition: ModelAppConditionInput): App
		@aws_api_key
@aws_iam
	deleteApp(input: DeleteAppInput!, condition: ModelAppConditionInput): App
		@aws_api_key
@aws_iam
	createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
		@aws_api_key
@aws_iam
	updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
		@aws_api_key
@aws_iam
	deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
		@aws_api_key
@aws_iam
	createCompany(input: CreateCompanyInput!, condition: ModelCompanyConditionInput): Company
		@aws_api_key
@aws_iam
	updateCompany(input: UpdateCompanyInput!, condition: ModelCompanyConditionInput): Company
		@aws_api_key
@aws_iam
	deleteCompany(input: DeleteCompanyInput!, condition: ModelCompanyConditionInput): Company
		@aws_api_key
@aws_iam
	createTwuser(input: CreateTwuserInput!, condition: ModelTwuserConditionInput): Twuser
		@aws_api_key
@aws_iam
	updateTwuser(input: UpdateTwuserInput!, condition: ModelTwuserConditionInput): Twuser
		@aws_api_key
@aws_iam
	deleteTwuser(input: DeleteTwuserInput!, condition: ModelTwuserConditionInput): Twuser
		@aws_api_key
@aws_iam
	createArticle(input: CreateArticleInput!, condition: ModelArticleConditionInput): Article
		@aws_api_key
@aws_iam
	updateArticle(input: UpdateArticleInput!, condition: ModelArticleConditionInput): Article
		@aws_api_key
@aws_iam
	deleteArticle(input: DeleteArticleInput!, condition: ModelArticleConditionInput): Article
		@aws_api_key
@aws_iam
	createJoke(input: CreateJokeInput!, condition: ModelJokeConditionInput): Joke
		@aws_api_key
@aws_iam
	updateJoke(input: UpdateJokeInput!, condition: ModelJokeConditionInput): Joke
		@aws_api_key
@aws_iam
	deleteJoke(input: DeleteJokeInput!, condition: ModelJokeConditionInput): Joke
		@aws_api_key
@aws_iam
}

type Post @aws_iam
@aws_api_key {
	id: ID!
	title: String!
	cat: String!
	condition: Condition
	currency: String
	data: AWSJSON
	location: String!
	description: String
	images: [String]
	parrent: [String]
	phone: Int
	physical: Boolean
	price: Int
	query: String
	appID: ID!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	_version: Int!
	_deleted: Boolean
	_lastChangedAt: AWSTimestamp!
}

type Query {
	getApp(id: ID!): App
		@aws_api_key
@aws_iam
	listApps(filter: ModelAppFilterInput, limit: Int, nextToken: String): ModelAppConnection

		@aws_api_key
@aws_iam
	getPost(id: ID!): Post
		@aws_api_key
@aws_iam
	listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection

		@aws_api_key
@aws_iam
	postsByAppID(
		appID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelPostFilterInput,
		limit: Int,
		nextToken: String
	): ModelPostConnection
		@aws_api_key
@aws_iam
	getCompany(id: ID!): Company
		@aws_api_key
@aws_iam
	listCompanies(filter: ModelCompanyFilterInput, limit: Int, nextToken: String): ModelCompanyConnection

		@aws_api_key
@aws_iam
	companiesByAppID(
		appID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelCompanyFilterInput,
		limit: Int,
		nextToken: String
	): ModelCompanyConnection
		@aws_api_key
@aws_iam
	getTwuser(id: ID!): Twuser
		@aws_api_key
@aws_iam
	listTwusers(filter: ModelTwuserFilterInput, limit: Int, nextToken: String): ModelTwuserConnection

		@aws_api_key
@aws_iam
	twusersByAppID(
		appID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelTwuserFilterInput,
		limit: Int,
		nextToken: String
	): ModelTwuserConnection
		@aws_api_key
@aws_iam
	getArticle(id: ID!): Article
		@aws_api_key
@aws_iam
	listArticles(filter: ModelArticleFilterInput, limit: Int, nextToken: String): ModelArticleConnection

		@aws_api_key
@aws_iam
	getJoke(id: ID!): Joke
		@aws_api_key
@aws_iam
	listJokes(filter: ModelJokeFilterInput, limit: Int, nextToken: String): ModelJokeConnection
		@aws_api_key
@aws_iam
	jokesByAppID(
		appID: ID!,
		sortDirection: ModelSortDirection,
		filter: ModelJokeFilterInput,
		limit: Int,
		nextToken: String
	): ModelJokeConnection
		@aws_api_key
@aws_iam
}

type Subscription {
	onUpdateJoke(filter: ModelSubscriptionJokeFilterInput): Joke
		@aws_subscribe(mutations: ["updateJoke"])
@aws_api_key
@aws_iam
	onDeleteJoke(filter: ModelSubscriptionJokeFilterInput): Joke
		@aws_subscribe(mutations: ["deleteJoke"])
@aws_api_key
@aws_iam
}

type Twuser @aws_iam
@aws_api_key {
	id: ID!
	user: String
	cat: String!
	letter: String
	nid: Int
	appID: ID!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	_version: Int!
	_deleted: Boolean
	_lastChangedAt: AWSTimestamp!
}



type Sort @aws_iam
@aws_api_key {
	ds_pk: ID!
	ds_sk: String!
}

input UpdateAppInput {
	id: ID!
	_version: Int
}

input UpdateArticleInput {
	id: ID!
	title: String
	cat: String
	content: AWSJSON
	image: String
	link: String
	nid: Int
	_version: Int
}

input UpdateCompanyInput {
	id: ID!
	name: String
	location: String
	zip: Int
	createdAt: Int
	cat: String
	appID: ID
	_version: Int
}

input UpdateJokeInput {
	id: ID!
	cat: String
	joke: String
	nid: Int
	appID: ID
	_version: Int
}

input UpdatePostInput {
	id: ID!
	title: String
	cat: String
	condition: Condition
	currency: String
	data: AWSJSON
	location: String
	description: String
	images: [String]
	parrent: [String]
	phone: Int
	physical: Boolean
	price: Int
	query: String
	appID: ID
	_version: Int
}

input UpdateTwuserInput {
	id: ID!
	user: String
	cat: String
	letter: String
	nid: Int
	appID: ID
	_version: Int
}